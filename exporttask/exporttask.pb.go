// Code generated by protoc-gen-go. DO NOT EDIT.
// source: exporttask.proto

package exporttask

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskInput struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=taskId" json:"taskId,omitempty"`
	TaskName             string   `protobuf:"bytes,2,opt,name=taskName" json:"taskName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskInput) Reset()         { *m = TaskInput{} }
func (m *TaskInput) String() string { return proto.CompactTextString(m) }
func (*TaskInput) ProtoMessage()    {}
func (*TaskInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_exporttask_92b9ca988a6951f1, []int{0}
}
func (m *TaskInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskInput.Unmarshal(m, b)
}
func (m *TaskInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskInput.Marshal(b, m, deterministic)
}
func (dst *TaskInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskInput.Merge(dst, src)
}
func (m *TaskInput) XXX_Size() int {
	return xxx_messageInfo_TaskInput.Size(m)
}
func (m *TaskInput) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskInput.DiscardUnknown(m)
}

var xxx_messageInfo_TaskInput proto.InternalMessageInfo

func (m *TaskInput) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskInput) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

type TaskOutput struct {
	Worker               string   `protobuf:"bytes,1,opt,name=worker" json:"worker,omitempty"`
	Time                 string   `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskOutput) Reset()         { *m = TaskOutput{} }
func (m *TaskOutput) String() string { return proto.CompactTextString(m) }
func (*TaskOutput) ProtoMessage()    {}
func (*TaskOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_exporttask_92b9ca988a6951f1, []int{1}
}
func (m *TaskOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskOutput.Unmarshal(m, b)
}
func (m *TaskOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskOutput.Marshal(b, m, deterministic)
}
func (dst *TaskOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskOutput.Merge(dst, src)
}
func (m *TaskOutput) XXX_Size() int {
	return xxx_messageInfo_TaskOutput.Size(m)
}
func (m *TaskOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskOutput.DiscardUnknown(m)
}

var xxx_messageInfo_TaskOutput proto.InternalMessageInfo

func (m *TaskOutput) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

func (m *TaskOutput) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func init() {
	proto.RegisterType((*TaskInput)(nil), "exporttask.TaskInput")
	proto.RegisterType((*TaskOutput)(nil), "exporttask.TaskOutput")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TaskServers service

type TaskServersClient interface {
	CreateTask(ctx context.Context, in *TaskInput, opts ...grpc.CallOption) (*TaskOutput, error)
	DelTask(ctx context.Context, in *TaskInput, opts ...grpc.CallOption) (*TaskOutput, error)
}

type taskServersClient struct {
	cc *grpc.ClientConn
}

func NewTaskServersClient(cc *grpc.ClientConn) TaskServersClient {
	return &taskServersClient{cc}
}

func (c *taskServersClient) CreateTask(ctx context.Context, in *TaskInput, opts ...grpc.CallOption) (*TaskOutput, error) {
	out := new(TaskOutput)
	err := grpc.Invoke(ctx, "/exporttask.TaskServers/CreateTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServersClient) DelTask(ctx context.Context, in *TaskInput, opts ...grpc.CallOption) (*TaskOutput, error) {
	out := new(TaskOutput)
	err := grpc.Invoke(ctx, "/exporttask.TaskServers/DelTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskServers service

type TaskServersServer interface {
	CreateTask(context.Context, *TaskInput) (*TaskOutput, error)
	DelTask(context.Context, *TaskInput) (*TaskOutput, error)
}

func RegisterTaskServersServer(s *grpc.Server, srv TaskServersServer) {
	s.RegisterService(&_TaskServers_serviceDesc, srv)
}

func _TaskServers_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServersServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exporttask.TaskServers/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServersServer).CreateTask(ctx, req.(*TaskInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskServers_DelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServersServer).DelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exporttask.TaskServers/DelTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServersServer).DelTask(ctx, req.(*TaskInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskServers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exporttask.TaskServers",
	HandlerType: (*TaskServersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskServers_CreateTask_Handler,
		},
		{
			MethodName: "DelTask",
			Handler:    _TaskServers_DelTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exporttask.proto",
}

func init() { proto.RegisterFile("exporttask.proto", fileDescriptor_exporttask_92b9ca988a6951f1) }

var fileDescriptor_exporttask_92b9ca988a6951f1 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xad, 0x28, 0xc8,
	0x2f, 0x2a, 0x29, 0x49, 0x2c, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0xd9, 0x73, 0x71, 0x86, 0x24, 0x16, 0x67, 0x7b, 0xe6, 0x15, 0x94, 0x96, 0x08, 0x89, 0x71,
	0xb1, 0x81, 0x04, 0x3d, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xa0, 0x3c, 0x21, 0x29,
	0x2e, 0x0e, 0x10, 0xcb, 0x2f, 0x31, 0x37, 0x55, 0x82, 0x09, 0x2c, 0x03, 0xe7, 0x2b, 0x59, 0x70,
	0x71, 0x81, 0x0c, 0xf0, 0x2f, 0x2d, 0x81, 0x9a, 0x50, 0x9e, 0x5f, 0x94, 0x9d, 0x5a, 0x04, 0x33,
	0x01, 0xc2, 0x13, 0x12, 0xe2, 0x62, 0x29, 0xc9, 0x84, 0xeb, 0x06, 0xb3, 0x8d, 0x3a, 0x18, 0xb9,
	0xb8, 0x41, 0x5a, 0x83, 0x53, 0x8b, 0xca, 0x52, 0x8b, 0x8a, 0x85, 0x6c, 0xb9, 0xb8, 0x9c, 0x8b,
	0x52, 0x13, 0x4b, 0x52, 0x41, 0x82, 0x42, 0xa2, 0x7a, 0x48, 0xee, 0x86, 0x3b, 0x51, 0x4a, 0x0c,
	0x5d, 0x18, 0x62, 0xb1, 0x12, 0x83, 0x90, 0x15, 0x17, 0xbb, 0x4b, 0x6a, 0x0e, 0x59, 0x7a, 0x9d,
	0x64, 0xb9, 0x84, 0x33, 0xf3, 0xf5, 0xd2, 0x8b, 0x0a, 0x92, 0xa1, 0x4a, 0xf4, 0x40, 0x6a, 0x9c,
	0x58, 0x40, 0x64, 0x00, 0x63, 0x12, 0x1b, 0x38, 0xdc, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xae, 0x6e, 0x00, 0xe9, 0x4b, 0x01, 0x00, 0x00,
}
